<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.madjava</groupId>
		<artifactId>madjava-microplus-service</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<groupId>com.madjava</groupId>
	<artifactId>madjava-microplus-shipment</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>madjava-microplus-shipment</name>
	<url>http://maven.apache.org</url>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus</artifactId>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
		</dependency>

		<!-- mysql驱动包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- h2驱动包 -->
	    <dependency>
	        <groupId>com.h2database</groupId>
	        <artifactId>h2</artifactId>
	        <scope>runtime</scope>
	    </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<!-- 
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
		</dependency>

		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-dubbo</artifactId>
		</dependency>
 		-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- swagger -->
		<dependency>
			<groupId>com.spring4all</groupId>
			<artifactId>swagger-spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>com.madjava</groupId>
			<artifactId>madjava-microplus-apiv2</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>com.madjava</groupId>
			<artifactId>madjava-microplus-internationalization</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>com.madjava</groupId>
			<artifactId>madjava-microplus-common</artifactId>
			<version>${project.version}</version>
		</dependency>
		
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
		</dependency>
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
		</dependency>
		<dependency>
			<groupId>jaxen</groupId>
			<artifactId>jaxen</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
		</dependency>
		<dependency>
			<groupId>com.xuxueli</groupId>
			<artifactId>xxl-job-core</artifactId>
			<version>${com.xuxueli.version}</version>
		</dependency>
		<dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
        </dependency>
	</dependencies>
	
	<profiles>
		<profile>
			<id>local</id>
			<properties>
				<profileActive>local</profileActive>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>dev</id>
			<properties>
				<profileActive>dev</profileActive>
			</properties>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
		</profile>
	</profiles>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
				<excludes>
					<exclude>env-*/*.*</exclude>
					<exclude>generatorConfig.xml</exclude>
				</excludes>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/resources/env-${profileActive}</directory>
				<includes>
					<include>bootstrap.properties</include>
					<include>application.properties</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- 添加docker maven插件 -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.1.1</version>
				<!--docker镜像相关的配置信息 -->
				<configuration>
					<!-- 与maven配置文件settings.xml中配置的server.id一致，用于推送镜像 -->
					<serverId>docker.eddy</serverId>
					<!--私有仓库地址 -->
					<registryUrl>registry.cn-zhangjiakou.aliyuncs.com</registryUrl>
					<!--镜像名，这里用工程名 -->
					<imageName>registry.cn-zhangjiakou.aliyuncs.com/eddy896123/${project.artifactId}:${project.version}</imageName>
					<!-- 指定基础镜像 类似dockerfile的FROM指令 -->
					<baseImage>java:8</baseImage>
					<env>
						<TZ>Asia/Shanghai</TZ>
					</env>
					<!--时区配置 -->
					<runs>
						<run>ln -snf /usr/share/zoneinfo/$TZ /etc/localtime</run>
						<run>echo $TZ > /etc/timezone</run>
					</runs>
					<!-- 配置容器启动后，执行什么命令，等于与 dockerfile的ENTRYPOINT -->
					<entryPoint>["java", "-jar",
						"/${project.build.finalName}.jar"]</entryPoint>
					<!-- 为dockerde tag指定版本号、latest -->
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
					<!-- 是否有push的功能 true代表有 -->
					<pushImage>true</pushImage>
					<!-- push后是否覆盖已存在的标签镜像 -->
					<forceTags>true</forceTags>
					<!-- 复制jar包到docker容器指定的目录 -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<!-- 指定要复制jar包的根目录，${project.build.directory}代表 target的目录 -->
							<directory>${project.build.directory}</directory>
							<!-- 指定要复制的文件，${project.build.finalName}代表打包后的jar -->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>

		</plugins>
	</build>
</project>
